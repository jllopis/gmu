package rest

import (
	"context"
	"net"
	"net/http"
	"os"
	"os/signal"
	"strings"
	"time"

	"github.com/grpc-ecosystem/grpc-gateway/runtime"
	"github.com/soheilhy/cmux"
	"go.uber.org/zap"
	"google.golang.org/grpc"

	"{{ .PackageName }}/pkg/api/{{ .ApiVersion }}"
	"{{ .PackageName }}/pkg/logger"
	"{{ .PackageName }}/pkg/protocol/rest/middleware"
)

// RunServer runs HTTP/REST gateway
func Serve(ctx context.Context, listen net.Listener) {
	if listen == nil {
		logger.Log.Fatal("rest.Serve got a nil listener")
	}

	ctx, cancel := context.WithCancel(ctx)
	defer cancel()

	mux := runtime.NewServeMux()
	opts := []grpc.DialOption{grpc.WithInsecure()}
	port := listen.Addr().String()[strings.LastIndex(listen.Addr().String(), ":")+1:]
	if err := v1.RegisterEchoServiceHandlerFromEndpoint(ctx, mux, "localhost:"+port, opts); err != nil {
		logger.Log.Fatal("failed to start HTTP gateway", zap.String("reason", err.Error()))
	}

	httpSrvMux := http.NewServeMux()
	httpSrvMux.Handle("/", middleware.AddRequestID(
		middleware.AddLogger(logger.Log, mux)))
	srv := &http.Server{
		Handler: httpSrvMux,
	}

	// graceful shutdown
	c := make(chan os.Signal, 1)
	signal.Notify(c, os.Interrupt)
	go func() {
		for range c {
			// sig is a ^C, handle it
		}
		_, cancel := context.WithTimeout(ctx, 5*time.Second)
		defer cancel()
		_ = srv.Shutdown(ctx)
	}()

	logger.Log.Info("starting HTTP/REST gateway on " + listen.Addr().String())
	if err := srv.Serve(listen); err != cmux.ErrListenerClosed {
		panic(err)
	}
}