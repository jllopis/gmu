package v1

import (
	"context"
	"time"

	"google.golang.org/grpc/codes"
	"google.golang.org/grpc/status"
	"github.com/golang/protobuf/ptypes/empty"

	"{{ .PackageName }}/pkg/api/{{ .ApiVersion }}"
	"{{ .PackageName }}/pkg/logger"
	"{{ .PackageName }}/pkg/version"
)

const (
	// apiVersion is version of API is provided by server
	apiVersion = "{{ .ApiVersion }}"
)

type {{ .ServiceName | ToLower }}ServiceServer struct{}

// New{{ .ServiceName }}ServiceServer creates ToDo service
func New{{ .ServiceName}}ServiceServer() {{ .ApiVersion }}.{{ .ServiceName}}ServiceServer {
	return &{{ .ServiceName | ToLower }}ServiceServer{}
}

// checkAPI checks if the API version requested by client is supported by server
func (e *{{ .ServiceName | ToLower }}ServiceServer) checkAPI(api string) error {
	// API version is "" means use current version of the service
	if len(api) > 0 {
		if apiVersion != api {
			return status.Errorf(codes.Unimplemented,
				"unsupported API version: service implements API version '%s', but asked for '%s'", apiVersion, api)
		}
	}
	return nil
}

// GetServerTime return the server time in nanoseconds at UTC time zone
func (s *{{ .ServiceName | ToLower }}ServiceServer) GetServerTime(ctx context.Context, empty *empty.Empty) (*{{ .ApiVersion }}.ServerTimeMessage, error) {
	logger.Log.Debug("[GetServerTime] got request")
	// // check if the API version requested by client is supported by server
	// if err := s.checkAPI(msg.Api); err != nil {
	// 	return nil, err
	// }
	return &{{ .ApiVersion }}.ServerTimeMessage{Value: time.Now().UTC().UnixNano()}, nil
}


// GetVersion returns the current Service and API Version with git commit and build date if available
func (s *{{ .ServiceName | ToLower }}ServiceServer) GetVersion(ctx context.Context, empty *empty.Empty) (*{{ .ApiVersion }}.VersionMessage, error) {
	return &{{ .ApiVersion }}.VersionMessage{
		Name: version.Name,
		Version:    version.Version,
		APIVersion: version.APIVersion,
		GitCommit:  version.GitCommit,
		BuildDate:  version.BuildDate,
	}, nil
}