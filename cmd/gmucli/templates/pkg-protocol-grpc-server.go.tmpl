package grpc

import (
	"context"
	"net"
	"os"
	"os/signal"

	"{{ .PackageName }}/pkg/logger"
	"{{ .PackageName }}/pkg/protocol/grpc/middleware"

	"github.com/soheilhy/cmux"
	"google.golang.org/grpc"
	"google.golang.org/grpc/reflection"
)

type GrpcServer struct {
	listener                 net.Listener
	grpcSrv                  *grpc.Server
	maxConcurrentStreams     int
	grpcReflection           bool
	prometheus               bool
	grpcServicesRegistrators []ServiceRegistrator
}

func New(listen net.Listener) *GrpcServer {
	if listen == nil {
		logger.Log.Fatal("grpc.Serve got a nil listener")
	}

	return &GrpcServer{
		listener: listen,
	}
}

// Serve runs gRPC service
func (g *GrpcServer) Serve(ctx context.Context) {
	grpcOpts := middleware.Combine([]grpc.ServerOption{})
	if g.maxConcurrentStreams > 0 {
		grpcOpts = append(grpcOpts, grpc.MaxConcurrentStreams(uint32(g.maxConcurrentStreams)))
	}

	// register service
	g.grpcSrv = grpc.NewServer(
		grpcOpts...,
	)

	g.registerGrpcServices()

	middleware.SetGrpc(g.grpcSrv)
	middleware.InitializeInterceptors()

	if g.grpcReflection {
		reflection.Register(g.grpcSrv)
	}

	// graceful shutdown
	c := make(chan os.Signal, 1)
	signal.Notify(c, os.Interrupt)
	go func() {
		for range c {
			// sig is a ^C, handle it
			logger.Log.Warn("shutting down gRPC server...")
			g.grpcSrv.GracefulStop()
			<-ctx.Done()
		}
	}()

	// start gRPC server
	logger.Log.Info("starting gRPC server on " + g.listener.Addr().String())
	if err := g.grpcSrv.Serve(g.listener); err != cmux.ErrListenerClosed {
		panic(err)
	}
}

func (g *GrpcServer) GetGrpcServer() *grpc.Server {
	return g.grpcSrv
}

