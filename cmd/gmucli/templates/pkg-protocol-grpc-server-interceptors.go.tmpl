package grpc

import "google.golang.org/grpc"

type (
	ServiceRegistrator func()
)

// InterceptorInitializer defines an interface with the methods that
// should be implemented to setup an interceptor.
//
// InterceptorInitializers will be added to GrpcServer.InterceptorInitializers slice
// and when the server is created, this array will be traversed and for every item the
// method Init(*GrpcServer) will be called.
//
// This will register the intercepto into the GrpcSrv.
type InterceptorInitializer interface {
	Init(*GrpcServer)
}

func (g *GrpcServer) Register(sr ServiceRegistrator) {
	g.grpcServicesRegistrators = append(g.grpcServicesRegistrators, sr)
}

// UseUnaryInterceptor adds a unary interceptor to the RPC server
func (g *GrpcServer) UseUnaryInterceptor(inter grpc.UnaryServerInterceptor) {
	g.unaryInter = append(g.unaryInter, inter)
}

// UseStreamInterceptor adds a stream interceptor to the RPC server
func (g *GrpcServer) UseStreamInterceptor(inter grpc.StreamServerInterceptor) {
	g.streamInter = append(g.streamInter, inter)
}

func (g *GrpcServer) RegisterInterceptorInitializer(i InterceptorInitializer) {
	g.interceptorInitializers = append(g.interceptorInitializers, i)
}

func (g *GrpcServer) initializeInterceptors() {
	for _, i := range g.interceptorInitializers {
		i.Init(g)
	}
}

func (g *GrpcServer) registerGrpcServices() {
	for _, s := range g.grpcServicesRegistrators {
		s()
	}
}
