package grpc

import (
	"net/http"
	"{{ .PackageName }}/pkg/logger"
	"{{ .PackageName }}/pkg/protocol/grpc/middleware"

	"google.golang.org/grpc"
	"github.com/grpc-ecosystem/go-grpc-prometheus"
	"github.com/prometheus/client_golang/prometheus/promhttp"
)

func (g *GrpcServer) SetMaxConcurrentStreams(n int) *GrpcServer {
	g.maxConcurrentStreams = n
	return g
}

func (g *GrpcServer) UseReflection() *GrpcServer {
	g.grpcReflection = true
	return g
}

func (g *GrpcServer) UseLogging() *GrpcServer {
	g.unaryInter = append([]grpc.UnaryServerInterceptor{middleware.AddUnaryLogging(logger.Log)}, g.unaryInter...)
	g.streamInter = append([]grpc.StreamServerInterceptor{middleware.AddStreamLogging(logger.Log)}, g.streamInter...)
	return g
}

func (g *GrpcServer) UsePrometheus(enableHistogram bool, httpMux *http.ServeMux, endpoint string) *GrpcServer {
	g.UseUnaryInterceptor(grpc_prometheus.UnaryServerInterceptor)
	g.UseStreamInterceptor(grpc_prometheus.StreamServerInterceptor)

	g.prometheus = true
	g.httpMux = httpMux
	g.prometheusEndpoint = endpoint

	return g
}

func (g *GrpcServer) RegisterPrometheus() {
	g.httpMux.Handle(g.prometheusEndpoint, promhttp.Handler())
	grpc_prometheus.Register(g.grpcSrv)
}