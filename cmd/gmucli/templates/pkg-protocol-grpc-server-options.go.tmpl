package grpc

import (
	"{{ .PackageName }}/pkg/protocol/grpc/middleware"
	{{ if .WithDb -}}"{{ .PackageName }}/pkg/store"{{ end }}

	"github.com/grpc-ecosystem/go-grpc-prometheus"
)

func (g *GrpcServer) SetMaxConcurrentStreams(n int) *GrpcServer {
	g.maxConcurrentStreams = n
	return g
}

func (g *GrpcServer) UseReflection() *GrpcServer {
	g.grpcReflection = true
	return g
}

func (g *GrpcServer) UseLogging(config *middleware.LoggingConfig) *GrpcServer {
	middleware.PushUnaryInterceptor(middleware.AddUnaryLogging(config.Logger))
	middleware.PushStreamInterceptor(middleware.AddStreamLogging(config.Logger))
	middleware.RegisterInterceptorInitializer(config)
	return g
}

func (g *GrpcServer) UsePrometheus(config *middleware.PrometheusInterceptorConfig) *GrpcServer {
	middleware.PushUnaryInterceptor(grpc_prometheus.UnaryServerInterceptor)
	middleware.PushStreamInterceptor(grpc_prometheus.StreamServerInterceptor)
	middleware.RegisterInterceptorInitializer(config)

	g.prometheus = true

	return g
}

{{ if .WithDb -}}
func (g *GrpcServer) UseStore(s store.Storer) *GrpcServer {
	g.store = s
	return g
}
{{ end }}