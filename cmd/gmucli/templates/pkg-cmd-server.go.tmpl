package cmd

import (
	"context"
	"flag"
	"fmt"
	"net"

	"github.com/soheilhy/cmux"

	api{{ .ApiVersion | ToUpper }} "{{ .PackageName }}/pkg/api/{{ .ApiVersion }}"
	"{{ .PackageName }}/pkg/logger"
	"{{ .PackageName }}/pkg/protocol/grpc"
	"{{ .PackageName }}/pkg/protocol/rest"
	service{{ .ApiVersion | ToUpper }} "{{ .PackageName }}/pkg/service/{{ .ApiVersion }}"
)

// Config is configuration for Server
type Config struct {
	// Service default port shared by protocols gRPC, http
	DefaultPort string
	// Log parameters section
	// LogLevel is global log level: Debug(-1), Info(0), Warn(1), Error(2), DPanic(3), Panic(4), Fatal(5)
	LogLevel int
	// LogTimeFormat is print time format for logger e.g. 2006-01-02T15:04:05Z07:00
	LogTimeFormat string
	// set max concurrent streams served by gRPC server
	GrpcMaxConcurrentStreams int
}

// RunServer runs gRPC server and HTTP gateway
func RunServer() error {
	ctx := context.Background()

	// get configuration
	var cfg Config
	flag.StringVar(&cfg.DefaultPort, "port", "9000", "port to bind services")
	flag.IntVar(&cfg.LogLevel, "log-level", 0, "Global log level")
	flag.StringVar(&cfg.LogTimeFormat, "log-time-format", "", "Print time format for logger e.g. 2006-01-02T15:04:05Z07:00")
	flag.IntVar(&cfg.GrpcMaxConcurrentStreams, "grpc-max-concurrent-streams", 250, "grpc server option MaxConcurrentStreams")
	flag.Parse()

	if len(cfg.DefaultPort) == 0 {
		return fmt.Errorf("invalid TCP port for server: '%s'", cfg.DefaultPort)
	}

	// initialize logger
	if err := logger.Init(cfg.LogLevel, cfg.LogTimeFormat); err != nil {
		return fmt.Errorf("failed to initialize logger: %v", err)
	}

	// create the tcp muxer
	mux, err := newCmux(nil, cfg.DefaultPort)
	if err != nil {
		logger.Log.Fatal("cant create tcp listener for CMux, error:" + err.Error())
	}
	// Match connections in order:
	// First grpc, and otherwise HTTP.
	// grpcListener := mux.Match(cmux.HTTP2HeaderFieldPrefix("content-type", "application/grpc"))
	grpcListener := mux.MatchWithWriters(cmux.HTTP2MatchHeaderFieldSendSettings("content-type", "application/grpc"))
	// Otherwise, we match it againts HTTP1 methods. If matched,
	// it is sent through the "httpl" listener.
	// httpListener := mux.Match(cmux.HTTP1Fast())
	// Any significa que no hay coincidencia previa
	httpListener := mux.Match(cmux.Any())

	logger.Log.Info("service started on port " + cfg.DefaultPort)
	// run gRPC gateway
	grpcSrv := grpc.New(grpcListener).
		SetMaxConcurrentStreams(cfg.GrpcMaxConcurrentStreams).
		UseReflection().
		UseLogging()

	// Register gRPC services
	serviceRegistrator := func() {
		api{{ .ApiVersion | ToUpper }}.Register{{.ServiceName}}ServiceServer(grpcSrv.GetGrpcServer(), service{{ .ApiVersion | ToUpper }}.New{{.ServiceName}}ServiceServer())
	}
	grpcSrv.Register(serviceRegistrator)
	go grpcSrv.Serve(ctx)
	// run HTTP gateway
	go rest.Serve(ctx, httpListener)

	return mux.Serve()
}

func newCmux(l net.Listener, port string) (cmux.CMux, error) {
	var err error
	if l == nil {
		// Create the main listener.
		l, err = net.Listen("tcp", ":"+port)
		if err != nil {
			return nil, err
		}
	}
	return cmux.New(l), nil
}